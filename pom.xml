<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  The common parent pom that will be used by the EJB3 tutorials.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!--  The JBoss server profile which will be used by the tutorials for
	deploying the application. Individual tutorials can override this value
	in their pom.xml depending on their need. For ex: The "Clustering" tutorial
	does not require clustering, so it's pom.xml is going to override this property 
	with "all" server profile -->    
  <properties>
  	<!--  The jboss.home "intermediate" property would not have been necessary, if
  	Maven's enforcer plugin supported enforcing setting of a "System" environment variable.
  	Details here http://markmail.org/message/jwfmtrjesuyag7bh
  	
  	This intermediate property is a workaround to use in the enforcer plugin to ensure that
  	the JBOSS_HOME is set. And now that we have an intermediate jboss.home, let's use this throughout
  	the pom instead of JBOSS_HOME.
  	 -->
  	<jboss.home>${JBOSS_HOME}</jboss.home>
    <jboss.server.config>default</jboss.server.config>
    
    <!--  Versions -->
    <version.maven-jboss-as-control-plugin>0.1.0</version.maven-jboss-as-control-plugin>
  </properties>

  <!-- Parent - The jboss-ejb3-tutorial-parent (Aggregator) will act as a parent
   
   -->

  <parent>
    <groupId>org.jboss.ejb3</groupId>
    <artifactId>jboss-ejb3-tutorial-parent</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <relativePath>../</relativePath>
  </parent>


  <modelVersion>4.0.0</modelVersion>
  <groupId>org.jboss.ejb3</groupId>
  <artifactId>jboss-ejb3-tutorial-common</artifactId>
  <version>0.1.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>JBoss EJB3 Tutorial Common Parent POM</name>
  <url>http://labs.jboss.com/jbossejb3/</url>
  <description>
    Common Parent POM for JBoss EJB3 Tutorials
  </description>


	<build>
  		<!--  The project is current not in the Maven standard structure. So
  		let's tell Maven where the source resides for each module -->
   		<sourceDirectory>./src</sourceDirectory>
   
   		<plugins>
			<!--  JBossAS Maven plugin for startup/shutdown/deploy/undeploy
			and other AS control -->
		  	<plugin>
          		<groupId>org.jboss.maven.plugins.jbossas</groupId>
            	<artifactId>maven-jboss-as-control-plugin</artifactId>
            	<version>${version.maven-jboss-as-control-plugin}</version>
            	
            	<!-- Executions -->
            	<!-- 
                	Deploy the tutorial 
              	-->
            	
                <executions>
              		   	<execution>
        		        <id>deploy-tutorial</id>
                		<goals>
                  			<goal>deploy</goal>
                		</goals>
                		<phase>install</phase>
                		<configuration>	
                  			<serverConfigName>${jboss.server.config}</serverConfigName>
                  			<files>
                    			${pom.build.directory}/${pom.artifactId}.${pom.packaging}
                  			</files>
                  			<jboss.test.run>true</jboss.test.run>
                		</configuration>
              		</execution>
				    
			

				</executions>

			</plugin>

		    <!--  Ant plugin to run Ant tasks -->      
			<plugin>
        		<artifactId>maven-antrun-plugin</artifactId>
        		<!--  Run the tutorial (client) -->		
        		<executions>
        			<execution>
	          			<id>run-tutorial</id>
					    <phase>install</phase>
	            		<configuration>
		              		<!--  Individual child tutorials, will provide the ${ejb3.tutorial.client} property value  -->
		              		<tasks>
		              			<!--  The classpath for the tutorial client -->
		              			<path id="ejb3.tutorial.classpath">
			      					<!-- Only the jbossall-client.jar should ideally be sufficient -->
				      				<fileset dir="${jboss.home}/client">
				         				<include name="**/jbossall-client.jar"/>
				      				</fileset>
				      				<pathelement location="${build.outputDirectory}"/>
		   						</path>
		   						<echo message="*********************************** JBoss EJB3 Tutorials ***********************************" />
		   						<echo message="**** Running ${ejb3.tutorial.client}" />
								<java classname="${ejb3.tutorial.client}" fork="yes" dir=".">
		         					<classpath refid="ejb3.tutorial.classpath"/> 
		      					</java>
		      					<echo message="********************************************************************************************" />
		              		</tasks>
	            		</configuration>
	            		<goals>
	              			<goal>run</goal>
	            		</goals>
          			</execution>
		        </executions>
      		</plugin>
      		
      		<!--  Undeploy the tutorial after the client is run -->
      		<!--  FIXME: The ordering of the plugin execution is not working in 2.0.9 Maven.
      		For some reason, the "undeploy" is being triggered before the "deploy". This seems
      		to be happening if the same plugin has more than one execution for the same phase. Needs more
      		investigation. Commenting out for now  
      		<plugin>
          		<groupId>org.jboss.maven.plugins.jbossas</groupId>
            	<artifactId>maven-jboss-as-control-plugin</artifactId>
            	<version>${version.maven-jboss-as-control-plugin}</version>
            	
            	
                <executions>
              		   	<execution>
        		        <id>undeploy-tutorial</id>
                		<goals>
                  			<goal>undeploy</goal>
                		</goals>
                		<phase>install</phase>
                		<configuration>	
                  			<serverConfigName>${jboss.server.config}</serverConfigName>
                  			<files>
                    			${pom.build.directory}/${pom.artifactId}.${pom.packaging}
                  			</files>
                  			<jboss.test.run>true</jboss.test.run>
                		</configuration>
              		</execution>
				    
			

				</executions>

			</plugin> -->
      		
      		<!-- Plugin to enforce JBOSS_HOME is set -->
      		<plugin>
        		<groupId>org.apache.maven.plugins</groupId>
        		<artifactId>maven-enforcer-plugin</artifactId>
        		<executions>
          			<execution>
            			<id>enforce-property</id>
						<phase>install</phase>
            			<goals>
              				<goal>enforce</goal>
            			</goals>
            			<configuration>
	              			<rules>
	                			<requireProperty>
	                  				<property>jboss.home</property>
	                  				<message>"Please set JBOSS_HOME"</message>
				                </requireProperty>
	            			</rules>  
	            			<fail>true</fail>
            			</configuration>
		          </execution>
        		</executions>
      		</plugin>
      		
      
		</plugins>
  
  		<!--  Include the jndi.properties and the log4j.xml in the classpath -->
   		<resources>
   			<resource>
   				<!--  Relative to each child tutorial -->
   				<directory>./</directory>
   				<includes>
   					<include>jndi.properties</include>
   					<include>log4j.xml</include>
   				</includes>
   			</resource>
   		</resources>
  	</build>  


	<!-- Dependencies -->
	<dependencies>
  		<dependency>
        	<groupId>org.jboss.javaee</groupId>
        	<artifactId>jboss-ejb-api</artifactId>
      	</dependency>
       	<dependency>
        	<groupId>org.jboss.javaee</groupId>
        	<artifactId>jboss-persistence-api</artifactId>
      	</dependency>
      	<dependency>
        	<groupId>org.jboss.javaee</groupId>
        	<artifactId>jboss-jms-api</artifactId>
      	</dependency>
  	
	</dependencies>
  
</project>
