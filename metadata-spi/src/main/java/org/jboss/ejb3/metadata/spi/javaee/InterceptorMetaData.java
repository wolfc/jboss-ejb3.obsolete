//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.06.08 at 07:12:16 PM IST
//

package org.jboss.ejb3.metadata.spi.javaee;

import java.util.List;

/**
 *
 *
 *         The interceptorType element declares information about a single
 *         interceptor class.  It consists of :
 *
 *             - An optional description.
 *             - The fully-qualified name of the interceptor class.
 *             - An optional list of around invoke methods declared on the
 *               interceptor class and/or its super-classes.
 *             - An optional list environment dependencies for the interceptor
 *               class and/or its super-classes.
 *             - An optional list of post-activate methods declared on the
 *               interceptor class and/or its super-classes.
 *             - An optional list of pre-passivate methods declared on the
 *               interceptor class and/or its super-classes.
 *
 *
 *
 * <p>Java class for interceptorType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="interceptorType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://java.sun.com/xml/ns/javaee}descriptionType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="interceptor-class" type="{http://java.sun.com/xml/ns/javaee}fully-qualified-classType"/>
 *         &lt;element name="around-invoke" type="{http://java.sun.com/xml/ns/javaee}around-invokeType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;group ref="{http://java.sun.com/xml/ns/javaee}jndiEnvironmentRefsGroup"/>
 *         &lt;element name="post-activate" type="{http://java.sun.com/xml/ns/javaee}lifecycle-callbackType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="pre-passivate" type="{http://java.sun.com/xml/ns/javaee}lifecycle-callbackType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
public interface InterceptorMetaData extends IdMetaData
{

   /**
    * Gets the value of the description property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the description property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getDescription().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link DescriptionMetaData }
    *
    *
    */
   List<DescriptionMetaData> getDescription();

   /**
    * Gets the value of the interceptorClass property.
    *
    * @return
    *     possible object is
    *     {@link FullyQualifiedClassType }
    *
    */
   String getInterceptorClass();

   /**
    * Sets the value of the interceptorClass property.
    *
    * @param value
    *     allowed object is
    *     {@link FullyQualifiedClassType }
    *
    */
   void setInterceptorClass(String value);

   /**
    * Gets the value of the aroundInvoke property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the aroundInvoke property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getAroundInvoke().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link AroundInvokeMetaData }
    *
    *
    */
   List<AroundInvokeMetaData> getAroundInvoke();

   /**
    * Gets the value of the envEntry property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the envEntry property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getEnvEntry().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link EnvEntryMetaData }
    *
    *
    */
   List<EnvEntryMetaData> getEnvEntry();

   /**
    * Gets the value of the ejbRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the ejbRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getEjbRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link EjbRefMetaData }
    *
    *
    */
   List<EjbRefMetaData> getEjbRef();

   /**
    * Gets the value of the ejbLocalRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the ejbLocalRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getEjbLocalRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link EjbLocalRefMetaData }
    *
    *
    */
   List<EjbLocalRefMetaData> getEjbLocalRef();

   /**
    * Gets the value of the serviceRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the serviceRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getServiceRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link ServiceRefMetaData }
    *
    *
    */
   List<ServiceRefMetaData> getServiceRef();

   /**
    * Gets the value of the resourceRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the resourceRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getResourceRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link ResourceRefMetaData }
    *
    *
    */
   List<ResourceRefMetaData> getResourceRef();

   /**
    * Gets the value of the resourceEnvRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the resourceEnvRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getResourceEnvRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link ResourceEnvRefMetaData }
    *
    *
    */
   List<ResourceEnvRefMetaData> getResourceEnvRef();

   /**
    * Gets the value of the messageDestinationRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the messageDestinationRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getMessageDestinationRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link MessageDestinationRefMetaData }
    *
    *
    */
   List<MessageDestinationRefMetaData> getMessageDestinationRef();

   /**
    * Gets the value of the persistenceContextRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the persistenceContextRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getPersistenceContextRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link PersistenceContextRefMetaData }
    *
    *
    */
   List<PersistenceContextRefMetaData> getPersistenceContextRef();

   /**
    * Gets the value of the persistenceUnitRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the persistenceUnitRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getPersistenceUnitRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link PersistenceUnitRefMetaData }
    *
    *
    */
   List<PersistenceUnitRefMetaData> getPersistenceUnitRef();

   /**
    * Gets the value of the postConstruct property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the postConstruct property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getPostConstruct().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link LifecycleCallbackMetaData }
    *
    *
    */
   List<LifecycleCallbackMetaData> getPostConstruct();

   /**
    * Gets the value of the preDestroy property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the preDestroy property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getPreDestroy().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link LifecycleCallbackMetaData }
    *
    *
    */
   List<LifecycleCallbackMetaData> getPreDestroy();

   /**
    * Gets the value of the postActivate property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the postActivate property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getPostActivate().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link LifecycleCallbackMetaData }
    *
    *
    */
   List<LifecycleCallbackMetaData> getPostActivate();

   /**
    * Gets the value of the prePassivate property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the prePassivate property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getPrePassivate().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link LifecycleCallbackMetaData }
    *
    *
    */
   List<LifecycleCallbackMetaData> getPrePassivate();



}
