//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.06.08 at 07:12:16 PM IST
//

package org.jboss.ejb3.metadata.spi.javaee;

import java.util.List;

/**
 * Represents the metadata for the ejb-jar element
 *
 * 	The ejb-jarType defines the root element of the EJB
 * 	deployment descriptor. It contains
 *
 * 	    - an optional description of the ejb-jar file
 * 	    - an optional display name
 * 	    - an optional icon that contains a small and a large
 * 	      icon file name
 * 	    - structural information about all included
 * 	      enterprise beans that is not specified through
 *               annotations
 *             - structural information about interceptor classes
 * 	    - a descriptor for container managed relationships,
 * 	      if any.
 * 	    - an optional application-assembly descriptor
 * 	    - an optional name of an ejb-client-jar file for the
 * 	      ejb-jar.
 *
 *
 *
 * <p>Java class for ejb-jarType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="ejb-jarType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{http://java.sun.com/xml/ns/javaee}descriptionGroup"/>
 *         &lt;element name="enterprise-beans" type="{http://java.sun.com/xml/ns/javaee}enterprise-beansType" minOccurs="0"/>
 *         &lt;element name="interceptors" type="{http://java.sun.com/xml/ns/javaee}interceptorsType" minOccurs="0"/>
 *         &lt;element name="relationships" type="{http://java.sun.com/xml/ns/javaee}relationshipsType" minOccurs="0"/>
 *         &lt;element name="assembly-descriptor" type="{http://java.sun.com/xml/ns/javaee}assembly-descriptorType" minOccurs="0"/>
 *         &lt;element name="ejb-client-jar" type="{http://java.sun.com/xml/ns/javaee}pathType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="version" use="required" type="{http://java.sun.com/xml/ns/javaee}dewey-versionType" fixed="3.0" />
 *       &lt;attribute name="metadata-complete" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
public interface EjbJarMetaData extends IdMetaData
{

   /**
    * Gets the value of the description property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the description property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getDescription().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link DescriptionMetaData }
    *
    *
    */
   List<DescriptionMetaData> getDescription();

   /**
    * Gets the value of the displayName property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the displayName property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getDisplayName().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link DisplayNameMetaData }
    *
    *
    */
   List<DisplayNameMetaData> getDisplayName();

   /**
    * Gets the value of the icon property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the icon property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getIcon().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link IconType }
    *
    *
    */
   List<IconType> getIcon();

   /**
    *
    *
    * @return Returns the enterprise beans associated with this ejb jar
    *
    */
   EnterpriseBeansMetaData getEnterpriseBeans();

   /**
    * Sets the enterprise beans associated with this ejb jar
    *
    * @param enterpriseBeans
    *
    */
   void setEnterpriseBeans(EnterpriseBeansMetaData enterpriseBeans);

   /**
    *
    * @return Returns the interceptors that have been declared in this
    * EJB deployment
    *
    */
   InterceptorsMetaData getInterceptors();

   /**
    * Sets the interceptors associated with this EJB deployment
    *
    * @param interceptors
    *
    */
   void setInterceptors(InterceptorsMetaData interceptors);

   /**
    * Gets the value of the relationships property.
    *
    * @return
    *     possible object is
    *     {@link RelationshipsMetaData }
    *
    */
   RelationshipsMetaData getRelationships();

   /**
    * Sets the value of the relationships property.
    *
    * @param value
    *     allowed object is
    *     {@link RelationshipsMetaData }
    *
    */
   void setRelationships(RelationshipsMetaData value);

   /**
    * Gets the value of the assemblyDescriptor property.
    *
    * @return
    *     possible object is
    *     {@link AssemblyDescriptorMetaData }
    *
    */
   AssemblyDescriptorMetaData getAssemblyDescriptor();

   /**
    * Sets the value of the assemblyDescriptor property.
    *
    * @param value
    *     allowed object is
    *     {@link AssemblyDescriptorMetaData }
    *
    */
   void setAssemblyDescriptor(AssemblyDescriptorMetaData value);

   /**
    * The optional ejb-client-jar element specifies a JAR
    * file that contains the class files necessary for a
    * client program to access the enterprise beans in the ejb-jar file.
    *
    * @return Returns the jar file name (ex: employee_service_client.jar)
    *
    */
   String getEjbClientJar();

   /**
    * The optional ejb-client-jar element specifies a JAR
    * file that contains the class files necessary for a
    * client program to access the enterprise beans in the ejb-jar file.
    *
    * @param ejbClientJar The name of the ejb client jar file
    *
    */
   void setEjbClientJar(String ejbClientJar);

   /**
    *  The metadata-complete attribute defines whether the
    *  deployment descriptor and other related deployment
    *  descriptors for this module (e.g., web service
    * descriptors) are complete, or whether the class
    * files available to this module and packaged with
    * this application should be examined for annotations
    *  that specify deployment information.
    *
    *  If metadata-complete is set to "true", the deployment
    *  tool will ignore any annotations that specify deployment
    *  information, which might be present in the class files
    *  of the application.
    *
    *  If metadata-complete is not specified or is set to
    *  "false", the deployment tool will examine the class
    *  files of the application for annotations, as
    *  specified by the specifications.
    *
    *
    * @return Returns true if metadata-complete attribute is set to true.
    * Else returns false.
    *
    */
   boolean isMetadataComplete();

   /**
    *  The metadata-complete attribute defines whether the
    *  deployment descriptor and other related deployment
    *  descriptors for this module (e.g., web service
    * descriptors) are complete, or whether the class
    * files available to this module and packaged with
    * this application should be examined for annotations
    *  that specify deployment information.
    *
    *  If metadata-complete is set to "true", the deployment
    *  tool will ignore any annotations that specify deployment
    *  information, which might be present in the class files
    *  of the application.
    *
    *  If metadata-complete is not specified or is set to
    *  "false", the deployment tool will examine the class
    *  files of the application for annotations, as
    *  specified by the specifications.
    *
    * @param metadataComplete Set to true if class files scanning for annotations
    * has to be disabled. Else set to false.
    *
    */
   void setMetadataComplete(boolean metadataComplete);

}
