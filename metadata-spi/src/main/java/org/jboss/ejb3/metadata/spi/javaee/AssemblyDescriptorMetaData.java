//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.06.08 at 07:12:16 PM IST
//

package org.jboss.ejb3.metadata.spi.javaee;

import java.util.List;

/**
 *
 *
 * 	The assembly-descriptorType defines
 * 	application-assembly information.
 *
 * 	The application-assembly information consists of the
 * 	following parts: the definition of security roles, the
 * 	definition of method permissions, the definition of
 * 	transaction attributes for enterprise beans with
 * 	container-managed transaction demarcation, the definition
 *         of interceptor bindings, a list of
 * 	methods to be excluded from being invoked, and a list of
 *         exception types that should be treated as application exceptions.
 *
 * 	All the parts are optional in the sense that they are
 * 	omitted if the lists represented by them are empty.
 *
 * 	Providing an assembly-descriptor in the deployment
 * 	descriptor is optional for the ejb-jar file producer.
 *
 *
 *
 * <p>Java class for assembly-descriptorType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="assembly-descriptorType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="security-role" type="{http://java.sun.com/xml/ns/javaee}security-roleType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="method-permission" type="{http://java.sun.com/xml/ns/javaee}method-permissionType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="container-transaction" type="{http://java.sun.com/xml/ns/javaee}container-transactionType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="interceptor-binding" type="{http://java.sun.com/xml/ns/javaee}interceptor-bindingType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="message-destination" type="{http://java.sun.com/xml/ns/javaee}message-destinationType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="exclude-list" type="{http://java.sun.com/xml/ns/javaee}exclude-listType" minOccurs="0"/>
 *         &lt;element name="application-exception" type="{http://java.sun.com/xml/ns/javaee}application-exceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
public interface AssemblyDescriptorMetaData extends IdMetaData
{

   /**
    * @return Returns the security roles configured in the assembly-descriptor
    * element
    *
    * Returns an empty list if no security roles have been configured
    *
    * Note that its upto the implementations to either return a modifiable
    * {@link List} or an umodifiable one.
    *
    */
   List<SecurityRoleMetaData> getSecurityRoles();

   /**
    * Sets the security roles configured in this assembly-descriptor
    *
    * @param securityRoles List of security roles
    */
   void setSecurityRoles(List<SecurityRoleMetaData> securityRoles);

   /**
    * The method-permissionType specifies that one or more
    * security roles are allowed to invoke one or more enterprise
    * bean methods.
    *
    * @return Returns a list of method permissions
    *
    */
   List<MethodPermissionMetaData> getMethodPermissions();

   /**
    * Sets the method permissions configuring the methods and security
    * roles which are allowed access to the methods
    *
    * @param methodPermissions
    */
   void setMethodPermissions(List<MethodPermissionMetaData> methodPermissions);

   /**
    * @return Returns the list of container transaction configurations
    *
    *
    */
   List<ContainerTransactionMetaData> getContainerTransactions();

   /**
    * Configures the container transactions for this assembly-descriptor
    *
    * @param containerTransactions
    */
   void setContainerTransactions(List<ContainerTransactionMetaData> containerTransactions);

   /**
    * @return Returns the interceptor bindings configured in this assembly descriptor
    *
    */
   List<InterceptorBindingMetaData> getInterceptorBindings();

   /**
    * Sets the interceptor bindings associated with this assembly descriptor
    *
    * @param interceptorBindings
    */
   void setInterceptorBindings(List<InterceptorBindingMetaData> interceptorBindings);

   /**
    * @return Returns the message destinations configured in this
    * assembly descriptor
    *
    *
    */
   List<MessageDestinationMetaData> getMessageDestinations();

   /**
    * Sets the message destinations associated with this assembly descriptor
    *
    * @param messageDestinations
    */
   void setMessageDestinations(List<MessageDestinationMetaData> messageDestinations);

   /**
    * Returns the list of methods which are marked as uncallable.
    *
    * If the method permission relation contains methods that are
    * in the exclude list, the Deployer should consider those
    * methods to be uncallable.
    *
    * @return Returns the uncallable methods
    *
    */
   List<EjbMethodMetaData> getExcludedMethods();

   /**
    * Sets the list of uncallable methods
    *
    * @param excludedMethods The EJB methods which are to be marked as uncallable
    */
   void setExcludedMethods(List<EjbMethodMetaData> excludedMethods);

   /**
    * @return Returns a list of application exceptions configured in the assembly
    * descriptor
    */
   List<ApplicationExceptionMetaData> getApplicationExceptions();

   /**
    * Sets the application exceptions configured in the assembly descriptor
    *
    * @param applicationExceptions List of application exceptions
    */
   void setApplicationExceptions(List<ApplicationExceptionMetaData> applicationExceptions);

}
