//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.06.08 at 07:12:16 PM IST
//

package org.jboss.ejb3.metadata.spi.jboss;

import java.util.List;

import org.jboss.ejb3.metadata.spi.javaee.MessageDrivenBeanMetaData;

/**
 *  The message-driven element holds information specific to jboss and not
 *             declared in ejb-jar.xml about a message-driven bean, such as container configuration and
 *             resources. The bean should already be declared in ejb-jar.xml, with the same ejb-name.
 *
 *
 * <p>Java class for message-driven-beanType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="message-driven-beanType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{http://www.jboss.com/xml/ns/javaee}descriptionGroup"/>
 *         &lt;element name="ejb-name" type="{http://java.sun.com/xml/ns/javaee}ejb-nameType"/>
 *         &lt;element name="activation-config" type="{http://www.jboss.com/xml/ns/javaee}activation-configType" minOccurs="0"/>
 *         &lt;element name="destination-jndi-name" type="{http://www.jboss.com/xml/ns/javaee}destination-jndi-nameType" minOccurs="0"/>
 *         &lt;element name="mdb-user" type="{http://www.jboss.com/xml/ns/javaee}mdb-userType" minOccurs="0"/>
 *         &lt;element name="mdb-passwd" type="{http://www.jboss.com/xml/ns/javaee}mdb-passwdType" minOccurs="0"/>
 *         &lt;element name="mdb-client-id" type="{http://www.jboss.com/xml/ns/javaee}mdb-client-idType" minOccurs="0"/>
 *         &lt;element name="mdb-subscription-id" type="{http://www.jboss.com/xml/ns/javaee}mdb-subscription-idType" minOccurs="0"/>
 *         &lt;element name="resource-adapter-name" type="{http://www.jboss.com/xml/ns/javaee}resource-adapter-nameType" minOccurs="0"/>
 *         &lt;element name="ejb-ref" type="{http://www.jboss.com/xml/ns/javaee}ejb-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ejb-local-ref" type="{http://www.jboss.com/xml/ns/javaee}ejb-local-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="service-ref" type="{http://www.jboss.com/xml/ns/javaee}service-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="resource-ref" type="{http://www.jboss.com/xml/ns/javaee}resource-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="resource-env-ref" type="{http://www.jboss.com/xml/ns/javaee}resource-env-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="message-destination-ref" type="{http://www.jboss.com/xml/ns/javaee}message-destination-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="security-identity" type="{http://www.jboss.com/xml/ns/javaee}security-identityType" minOccurs="0"/>
 *         &lt;element name="security-domain" type="{http://www.jboss.com/xml/ns/javaee}security-domainType" minOccurs="0"/>
 *         &lt;element name="method-attributes" type="{http://www.jboss.com/xml/ns/javaee}method-attributesType" minOccurs="0"/>
 *         &lt;element name="depends" type="{http://www.jboss.com/xml/ns/javaee}dependsType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ejb-timeout-identity" type="{http://www.jboss.com/xml/ns/javaee}security-identityType" minOccurs="0"/>
 *         &lt;element name="annotation" type="{http://www.jboss.com/xml/ns/javaee}annotationType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ignore-dependency" type="{http://www.jboss.com/xml/ns/javaee}ignore-dependencyType" minOccurs="0"/>
 *         &lt;element name="aop-domain-name" type="{http://www.jboss.com/xml/ns/javaee}aop-domain-nameType" minOccurs="0"/>
 *         &lt;element name="pool-config" type="{http://www.jboss.com/xml/ns/javaee}pool-configType" minOccurs="0"/>
 *         &lt;element name="jndi-ref" type="{http://www.jboss.com/xml/ns/javaee}jndi-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="create-destination" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
public interface JBossMessageDrivenBeanMetaData extends MessageDrivenBeanMetaData
{

   /**
    *
    * @return Returns the jndi name of the destination on which this message driven
    * bean is listening.
    *
    */
   String getDestinationJndiName();

   /**
    * Sets the jndi name of the destination
    *
    * @param destinationJndiName The jndi name of the destination
    *
    */
   void setDestinationJndiName(String destinationJndiName);

   /**
    *
    * @return Returns the (optional) user name that's used for the JMS
    * connection that delivers the message
    *
    */
   String getMdbUser();

   /**
    * Sets the user name that will be used for the JMS connection that delivers the message
    *
    * @param mdbUserName The user name to be use for the JMS connection while delivering the
    * message
    *
    */
   void setMdbUser(String value);

   /**
    * @return Returns the password that's used for the JMS
    * connection that delivers the message
    *
    */
   String getMdbPasswd();

   /**
    * Sets the password that will be used for the JMS connection that delivers the message
    *
    * @param mdbPassword The password to be use for the JMS connection while delivering the
    * message
    *
    */
   void setMdbPasswd(String mdbPassword);

   /**
    * @return Returns the client id that's used for the JMS
    * connection that delivers the message
    *
    */
   String getMdbClientId();

   /**
    * Sets the client id that will be used for the JMS connection that delivers the message
    *
    * @param mdbClientId The client id to be use for the JMS connection while delivering the
    * message
    *
    */
   void setMdbClientId(String mdbClientId);

   /**
    *
    * @return Returns the subscription name of the topic delivery
    *
    */
   String getMdbSubscriptionId();

   /**
    * Sets the subscription name for the topic delivery
    *
    * @param subscriptionId Subscription name for the topic delivery
    *
    */
   void setMdbSubscriptionId(String subscriptionId);

   /**
    *
    * @return Returns the name of the rar used in JCA 1.5 message inflow
    *
    */
   String getResourceAdapterName();

   /**
    * Sets the name of the rar used in JCA 1.5 message inflow
    *
    * @param rarName The rar name
    *
    */
   void setResourceAdapterName(String rarName);

   /**
    * Gets the value of the messageDestinationRef property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the messageDestinationRef property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getMessageDestinationRef().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link JBossMessageDestinationRefMetaData }
    *
    *
    */
   //TODO
   List<JBossMessageDestinationRefMetaData> getMessageDestinationRefs();

   /**
   *
   * @return Return the security domain name associated with this bean
   *
   */
   String getSecurityDomain();

   /**
    * Sets the security domain name for this bean.
    *
    * @param securityDomain The security domain name
    *
    */
   void setSecurityDomain(String value);

   /**
    * @return Returns the method attributes associated with this bean
    *
    *
    */
   MethodAttributesMetaData getMethodAttributes();

   /**
    * Sets the method attributes for this bean
    *
    * @param methodAttributes The method attributes for this bean
    *
    */
   void setMethodAttributes(MethodAttributesMetaData methodAttributes);

   /**
    * @return Returns a list of dependencies for this bean. The list contains
    * JMX ObjectName(s) of a service on which the EJB depends.
    *
    * Returns an empty list if there are no such dependencies.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list
    *
    */
   List<String> getDepends();

   /**
    * Sets the list of dependencies for this bean
    *
    * @param depends The list of JMX ObjectName(s) of services on which this bean depends
    */
   void setDepends(List<String> depends);

   /**
   *
   * @return
   */
   JBossSecurityIdentityMetaData getEjbTimeoutIdentity();

   /**
    * Sets the value of the ejbTimeoutIdentity property.
    *
    * @param value
    *
    */
   void setEjbTimeoutIdentity(JBossSecurityIdentityMetaData value);

   /**
    * @return Returns a list of annotations that will be added to the bean class,
    * method or field.
    *
    * Returns an empty list if there are no such dependencies.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list
    *
    */
   List<AnnotationMetaData> getAnnotations();

   /**
    * Set the list of annotations to be added to the bean class, method or field
    *
    * @param annotations The list of annotations
    */
   void setAnnotations(List<AnnotationMetaData> annotations);

   /**
    *  @return Returns the ignore dependency metadata associated with this bean
    *
    */
   IgnoreDependencyMetaData getIgnoreDependency();

   /**
    * Sets the ignore dependency metadata for this bean
    *
    * @param ignoreDependency The ignore dependency metadata
    *
    */
   void setIgnoreDependency(IgnoreDependencyMetaData ignoreDependency);

   /**
   *
   * @return Returns the AOP domain name associated with this bean.
   * The aspect domain contains the interceptor stack and bindings
   *
   */
   String getAopDomainName();

   /**
    * Sets the AOP domain name for this bean
    *
    * @param aopDomainName The AOP domain name
    *
    */
   void setAopDomainName(String aopDomainName);

   /**
   *
   *
   * @return Returns the pool configuration of this bean
   *
   */
   PoolConfigMetaData getPoolConfig();

   /**
    * Sets the pool configuration of this bean
    *
    * @param poolConfig The pool configuration for this bean
    *
    */
   void setPoolConfig(PoolConfigMetaData value);

   /**
    * @return Returns a list of jndi references for this bean.
    * Returns an empty list if there are no such references.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list
    *
    *
    */
   List<JndiRefMetaData> getJndiRefs();

   /**
    * Set the jndi references used to inject generic types based on JNDI name,
    * for this bean
    *
    * @param jndiRefs
    */
   void setJndiRefs(List<JndiRefMetaData> jndiRefs);

   /**
    *
    * @return Returns true if the destination, on which this message driven bean is listening,
    * has to be created, if it doesn't exist. Else returns false.
    *
    */
   boolean isCreateDestination();

   /**
    * Set to true if the destination, on which this message driven bean is listening,
    * has to be created if it doesn't exist.
    *
    * @param createDestination True if a non-existent destination has to be created. False
    * otherwise.
    *
    */
   void setCreateDestination(boolean value);

}
