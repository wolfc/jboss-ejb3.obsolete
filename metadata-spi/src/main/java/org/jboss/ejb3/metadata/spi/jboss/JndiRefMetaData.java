//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.06.08 at 07:12:16 PM IST
//

package org.jboss.ejb3.metadata.spi.jboss;

import java.util.List;

import org.jboss.ejb3.metadata.spi.javaee.DescriptionMetaData;
import org.jboss.ejb3.metadata.spi.javaee.IdMetaData;
import org.jboss.ejb3.metadata.spi.javaee.InjectionTargetMetaData;

/**
 *
 *
 *           Used to inject generic types based on JNDI name
 *
 *
 *
 * <p>Java class for jndi-refType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="jndi-refType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://java.sun.com/xml/ns/javaee}descriptionType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="jndi-ref-name" type="{http://java.sun.com/xml/ns/javaee}jndi-nameType"/>
 *         &lt;group ref="{http://www.jboss.com/xml/ns/javaee}resourceGroup"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
public interface JndiRefMetaData extends IdMetaData
{

   /**
    * Gets the value of the description property.
    *
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the description property.
    *
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getDescription().add(newItem);
    * </pre>
    *
    *
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link DescriptionMetaData }
    *
    *
    */
   List<DescriptionMetaData> getDescription();

   /**
    *
    * @return The jndi reference name. This is relative to the
    * java:comp/env context
    *
    */
   String getJndiRefName();

   /**
    * Sets the jndi reference name, relative to the java:comp/env context
    *
    * @param jndiRefName The jndi reference name
    *
    */
   void setJndiRefName(String jndiRefName);

   /**
    *
    * @return Returns the jndi name
    *
    *
    */
   String getJndiName();

   /**
    * Sets the jndi name
    * @param jndiName The jndi name
    *
    */
   void setJndiName(String jndiName);

   /**
    *
    * @return Returns the mapped name
    *
    */
   String getMappedName();

   /**
    * Sets the mapped name
    *
    * @param mappedName The mapped name
    *
    */
   void setMappedName(String mappedName);

   /**
    * Returns a list of injection target(s) metadata for
    * this jndi reference
    * Returns an empty list if there is no injection-target.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list.
    */
   List<InjectionTargetMetaData> getInjectionTargets();

   /**
    * Sets the list of injection targets for this jndi reference
    *
    * @param injectionTargets List of injection targets metadata for this jndi reference
    */
   void setInjectionTargets(List<InjectionTargetMetaData> injectionTargets);

   /**
    *
    * @return Returns true if this jndi reference dependency has to be ignored.
    * Else returns false
    */
   boolean isIgnoreDependency();

   /**
    * Set to true if the jndi reference dependency has to be ignored. Else
    * set to false.
    *
    * @param ignoreDependency True if the jndi reference dependency has to be ignored. Else
    * set to false.
    *
    */
   void setIgnoreDependency(boolean ignoreDependency);



}
