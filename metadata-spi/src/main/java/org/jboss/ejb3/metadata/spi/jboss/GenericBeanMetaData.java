//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.08 at 07:12:16 PM IST 
//

package org.jboss.ejb3.metadata.spi.jboss;

import java.util.List;

import org.jboss.ejb3.metadata.spi.javaee.DescriptionMetaData;
import org.jboss.ejb3.metadata.spi.javaee.DisplayNameMetaData;
import org.jboss.ejb3.metadata.spi.javaee.IconType;
import org.jboss.ejb3.metadata.spi.javaee.LifecycleCallbackMetaData;

/**
 * <p>Java class for generic-beanType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="generic-beanType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{http://www.jboss.com/xml/ns/javaee}descriptionGroup"/>
 *         &lt;element name="ejb-name" type="{http://java.sun.com/xml/ns/javaee}ejb-nameType"/>
 *         &lt;element name="mapped-name" type="{http://java.sun.com/xml/ns/javaee}jndi-nameType" minOccurs="0"/>
 *         &lt;group ref="{http://www.jboss.com/xml/ns/javaee}jndiEnvironmentRefsGroup"/>
 *         &lt;element name="security-identity" type="{http://www.jboss.com/xml/ns/javaee}security-identityType" minOccurs="0"/>
 *         &lt;element name="jndi-name" type="{http://java.sun.com/xml/ns/javaee}jndi-nameType" minOccurs="0"/>
 *         &lt;element name="home-jndi-name" type="{http://java.sun.com/xml/ns/javaee}jndi-nameType" minOccurs="0"/>
 *         &lt;element name="local-jndi-name" type="{http://www.jboss.com/xml/ns/javaee}local-jndi-nameType" minOccurs="0"/>
 *         &lt;element name="local-home-jndi-name" type="{http://java.sun.com/xml/ns/javaee}jndi-nameType" minOccurs="0"/>
 *         &lt;element name="jndi-binding-policy" type="{http://www.jboss.com/xml/ns/javaee}jndi-binding-policyType" minOccurs="0"/>
 *         &lt;element name="security-domain" type="{http://www.jboss.com/xml/ns/javaee}security-domainType" minOccurs="0"/>
 *         &lt;element name="method-attributes" type="{http://www.jboss.com/xml/ns/javaee}method-attributesType" minOccurs="0"/>
 *         &lt;element name="depends" type="{http://www.jboss.com/xml/ns/javaee}dependsType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="annotation" type="{http://www.jboss.com/xml/ns/javaee}annotationType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ignore-dependency" type="{http://www.jboss.com/xml/ns/javaee}ignore-dependencyType" minOccurs="0"/>
 *         &lt;element name="aop-domain-name" type="{http://www.jboss.com/xml/ns/javaee}aop-domain-nameType" minOccurs="0"/>
 *         &lt;element name="pool-config" type="{http://www.jboss.com/xml/ns/javaee}pool-configType" minOccurs="0"/>
 *         &lt;element name="jndi-ref" type="{http://www.jboss.com/xml/ns/javaee}jndi-refType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="port-component" type="{http://www.jboss.com/xml/ns/javaee}port-componentType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
public interface GenericBeanMetaData
{

   /**
    * Gets the value of the description property.
    * 
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the description property.
    * 
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getDescription().add(newItem);
    * </pre>
    * 
    * 
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link DescriptionMetaData }
    * 
    * 
    */
   List<DescriptionMetaData> getDescription();

   /**
    * Gets the value of the displayName property.
    * 
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the displayName property.
    * 
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getDisplayName().add(newItem);
    * </pre>
    * 
    * 
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link DisplayNameMetaData }
    * 
    * 
    */
   List<DisplayNameMetaData> getDisplayName();

   /**
    * Gets the value of the icon property.
    * 
    * <p>
    * This accessor method returns a reference to the live list,
    * not a snapshot. Therefore any modification you make to the
    * returned list will be present inside the JAXB object.
    * This is why there is not a <CODE>set</CODE> method for the icon property.
    * 
    * <p>
    * For example, to add a new item, do as follows:
    * <pre>
    *    getIcon().add(newItem);
    * </pre>
    * 
    * 
    * <p>
    * Objects of the following type(s) are allowed in the list
    * {@link IconType }
    * 
    * 
    */
   List<IconType> getIcon();

   /**
    * @return Returns the EJB name
    *     
    */
   String getEjbName();

   /**
    * Sets the bean name
    * @param ejbName Name of the EJB
    *     
    */
   void setEjbName(String ejbName);

   /**
    * Returns the mapped-name of the bean.
    * Returns null if there is no mapped-name for
    * this bean
    *
    */
   String getMappedName();

   /**
    * Sets the mapped-name of the bean
    * @param mappedName The mapped-name of the bean
    */
   void setMappedName(String mappedName);

   /**
    * Returns a list of env-entry metadata of this bean.
    *
    * Returns an empty list if there is no env-entry.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list.
    *
    *
    */
   List<JBossEnvEntryMetaData> getEnvEntries();

   /**
    * Sets the env entries for this bean
    * 
    * @param envEntries
    */
   void setEnvEntries(List<JBossEnvEntryMetaData> envEntries);

   /**
    * Returns the list of EJB references of this bean
    * Returns an empty list if there is no EJB reference for this bean.
    * 
    */
   List<JBossEjbRefMetaData> getEjbRefs();

   /**
    * Sets the list of EJB references for this bean
    * 
    * @param ejbRefs
    */
   void setEjbRefs(List<JBossEjbRefMetaData> ejbRefs);

   /**
    * @return Returns the list of EJB local references of this bean
    * Returns an empty list if there is no EJB local reference for this bean.
    * 
    */
   List<JBossEjbLocalRefMetaData> getEjbLocalRefs();

   /**
    * Sets the list of EJB local references for this bean
    *
    * @param ejbLocalRefs The list of EJB local references
    */
   void setEjbLocalRefs(List<JBossEjbLocalRefMetaData> ejbLocalRefs);

   /**
    * Returns the list of web service reference(s) of this bean.
    * Returns an empty list if there are no such references.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list.
    *
    */
   List<JBossServiceRefMetaData> getServiceRefs();

   /**
    * Sets the web service references for this bean.
    * 
    * @param serviceRefs
    */
   void setServiceRefs(List<JBossServiceRefMetaData> serviceRefs);

   /**
    * @return Returns the list of resource references of this bean.
    * Returns an empty list if there are no such references.
    * 
    * 
    */
   List<JBossResourceRefMetaData> getResourceRefs();

   /**
    * Sets the resource references of this bean
    * 
    * @param resourceRefs
    */
   void setResourceRefs(List<JBossResourceRefMetaData> resourceRefs);

   /**
    * @return Returns the list of resource environment references of this bean.
    * Returns an empty list if there are no such references.
    * 
    * 
    */
   List<JBossResourceEnvRefMetaData> getResourceEnvRefs();

   /**
    * Sets the resource env references of this bean
    * 
    * @param resourceEnvRefs
    */
   void setResourceEnvRefs(List<JBossResourceEnvRefMetaData> resourceEnvRefs);

   /**
    * @return Returns the list of message destination references of this bean.
    * Returns an empty list if there are no such references.
    * 
    * 
    */
   List<JBossMessageDestinationRefMetaData> getMessageDestinationRefs();

   /**
    * Sets the message destination references of this bean
    * 
    * @param messageDestinationRefs
    */
   void setMessageDestinationRefs(List<JBossMessageDestinationRefMetaData> messageDestinationRefs);

   /**
    * @return Returns the list of persistence context references of this bean
    *
    * Returns an empty list if there are no such references.
    * 
    * 
    */
   List<JBossPersistenceContextRefMetaData> getPersistenceContextRefs();

   /**
    * Sets the persistence context references associated with this bean
    * 
    * @param persistenceCtxRefs
    */
   void setPersistenceContextRefs(List<JBossPersistenceContextRefMetaData> persistenceCtxRefs);

   /**
    * @returns Returns the persistence unit references associated with this bean
    *
    * Returns an empty list if there are no such references.
    * 
    * 
    */
   List<JBossPersistenceUnitRefMetaData> getPersistenceUnitRefs();

   /**
    * Sets the persistence unit references associated with this bean
    * 
    * @param persistenceUnitRefs
    */
   void setPersistenceUnitRefs(List<JBossPersistenceUnitRefMetaData> persistenceUnitRefs);

   /**
    * @return Returns a list of post-construct methods associated with this bean
    * Returns an empty list if there are no post-constructs.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list
    *
    */
   List<LifecycleCallbackMetaData> getPostConstructs();

   /**
    * Sets the post-constructs associated with this bean
    *
    * @param postConstructs The list of post-constructs
    */
   void setPostConstructs(List<LifecycleCallbackMetaData> postConstructs);

   /**
    * @return Returns a list of pre-destroy methods associated with this bean
    * Returns an empty list if there are no pre-destroy callbacks for this bean.
    *
    * It's upto the implementation to return either a modifiable
    * or an unmodifiable list
    *
    *
    */
   List<LifecycleCallbackMetaData> getPreDestroys();

   /**
    * Sets the list of pre-destroy callbacks associated with this bean
    *
    * @param preDestroys The list of pre-destroys for this bean
    */
   void setPreDestroys(List<LifecycleCallbackMetaData> preDestroys);

   /**
    * @return Returns the security identity associated with this bean
    *     
    */
   JBossSecurityIdentityMetaData getSecurityIdentity();

   /**
    * Sets the security identity associated with this bean
    * 
    * @param securityIdentity 
    *     
    */
   void setSecurityIdentity(JBossSecurityIdentityMetaData securityIdentity);

   /**
    * 
    * @return Returns the jndi name of the bean
    *     
    */
   String getJndiName();

   /**
    * Sets the jndi-name
    * 
    * @param jndiName
    *     
    */
   void setJndiName(String jndiName);

   /**
    * Returns the jndi name of the home interface of the bean
    *     
    */
   String getHomeJndiName();

   /**
    * Sets the jndi name of the home interface of the bean
    * 
    * @param homeJndiName The jndi name of the home interface of the bean
    *          
    */
   void setHomeJndiName(String homeJndiName);

   /**
    * Returns the jndi name of the local interface of the bean
    *     
    */
   String getLocalJndiName();

   /**
    * Sets the jndi name of the local interface of the bean
    * 
    * @param localJndiName The jndi name of the local interface of the bean
    *     
    */
   void setLocalJndiName(String localJndiName);

   /**
    * Returns the jndi name of the local home interface of the bean
    *     
    */
   String getLocalHomeJndiName();

   /**
    * Sets the jndi name of the local home interface of the bean
    * 
    * @param localHomeJndiName The jndi name of the local home interface 
    *   of the bean
    *     
    */
   void setLocalHomeJndiName(String localHomeJndiName);

   /**
    * @return Returns the fully qualified class name of the JNDI binding policy
    *     
    */
   String getJndiBindingPolicy();

   /**
    * Sets the jndi binding policy of this bean
    * 
    * @param jndiBindingPolicy Fully qualified class name of the JNDI binding policy
    *     
    */
   void setJndiBindingPolicy(String jndiBindingPolicy);

   /**
    * @return Returns the security domain associated with this bean
    */
   String getSecurityDomain();

   /**
    * Sets the security domain of this bean
    * 
    * @param securityDomain The security domain for this bean
    *     
    */
   void setSecurityDomain(String securityDomain);

   /**
    * Returns the method attributes configured for this bean
    * 
    */
   MethodAttributesMetaData getMethodAttributes();

   /**
    * Sets the method attributes for this bean 
    * 
    * @param methodAttributes
    *     
    */
   void setMethodAttributes(MethodAttributesMetaData methodAttributes);

   /**
    * @return Returns a list of dependencies of this bean
    * 
    */
   List<String> getDepends();

   /**
    * Sets the dependencies for this bean
    * 
    * @param dependencies
    */
   void setDepends(List<String> dependencies);

   /**
    * @return Returns the list of annotation added to this  consumer bean
    * 
    */
   List<AnnotationMetaData> getAnnotations();

   /**
    * Set the list of annotations to be added to the bean class, method or field
    * 
    * @param annotations The list of annotations
    */
   void setAnnotations(List<AnnotationMetaData> annotations);

   /**
    *  @return Returns the ignore dependency metadata associated with this bean
    *
    */
   IgnoreDependencyMetaData getIgnoreDependency();

   /**
    * Sets the ignore dependency metadata for this bean
    *
    * @param ignoreDependency The ignore dependency metadata
    *
    */
   void setIgnoreDependency(IgnoreDependencyMetaData ignoreDependency);

   /**
    *
    * @return Returns the AOP domain name associated with this bean.
    * The aspect domain contains the interceptor stack and bindings
    *
    */
   String getAopDomainName();

   /**
    * Sets the AOP domain name for this bean
    *
    * @param aopDomainName The AOP domain name
    *
    */
   void setAopDomainName(String aopDomainName);

   /**
   *
   *
   * @return Returns the pool configuration of this bean
   *
   */
   PoolConfigMetaData getPoolConfig();

   /**
    * Sets the pool configuration of this bean
    *
    * @param poolConfig The pool configuration for this bean
    *
    */
   void setPoolConfig(PoolConfigMetaData poolConfig);

   /**
    * @return Returns a list of jndi references for this bean.
    * Returns an empty list if there are no such references.
    *
    */
   List<JndiRefMetaData> getJndiRefs();

   /**
    * Set the jndi references used to inject generic types based on JNDI name,
    * for this bean
    *
    * @param jndiRefs
    */
   void setJndiRefs(List<JndiRefMetaData> jndiRefs);

   /**
   *
   * @return Returns the port component associated with this bean
   *
   */
   PortComponentMetaData getPortComponent();

   /**
    * Sets the port component metadata for this bean
    *
    * @param portComponent
    *
    */
   void setPortComponent(PortComponentMetaData portComponent);

}
